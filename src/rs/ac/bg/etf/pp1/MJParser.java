
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 27 01:08:31 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.as.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 27 01:08:31 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\010\000\002\002\004\000\002\006" +
    "\004\000\002\006\002\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\002\000\002\007\005\000" +
    "\002\032\003\000\002\032\005\000\002\033\005\000\002" +
    "\033\003\000\002\033\005\000\002\033\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\011\006" +
    "\000\002\013\007\000\002\013\005\000\002\004\003\000" +
    "\002\003\004\000\002\003\002\000\002\044\002\000\002" +
    "\045\002\000\002\005\015\000\002\017\003\000\002\017" +
    "\002\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\022\004\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\030\005\000\002\030\007\000\002" +
    "\031\006\000\002\031\006\000\002\031\005\000\002\031" +
    "\005\000\002\031\007\000\002\031\007\000\002\031\011" +
    "\000\002\031\007\000\002\031\005\000\002\031\004\000" +
    "\002\031\007\000\002\031\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\005\000\002\027" +
    "\003\000\002\027\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\007\000" +
    "\002\027\005\000\002\020\003\000\002\020\002\000\002" +
    "\021\005\000\002\021\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\006\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\003\000\002\041\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\005\001\002\000\004\002\224\001" +
    "\002\000\004\066\006\001\002\000\010\010\ufffa\052\ufffa" +
    "\066\ufffa\001\002\000\010\010\010\052\011\066\016\001" +
    "\002\000\004\066\016\001\002\000\006\053\uffea\066\uffea" +
    "\001\002\000\010\010\ufffc\052\ufffc\066\ufffc\001\002\000" +
    "\006\003\020\066\022\001\002\000\010\010\ufffb\052\ufffb" +
    "\066\ufffb\001\002\000\010\010\ufffd\052\ufffd\066\ufffd\001" +
    "\002\000\056\003\uffec\011\uffec\013\uffec\014\uffec\015\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\045\uffec\046\uffec\050\uffec\051\uffec" +
    "\052\uffec\055\uffec\062\uffec\066\uffec\001\002\000\006\045" +
    "\ufff5\046\030\001\002\000\006\045\ufff3\046\026\001\002" +
    "\000\004\045\025\001\002\000\010\045\ufff8\046\ufff8\050" +
    "\023\001\002\000\004\051\024\001\002\000\006\045\ufff7" +
    "\046\ufff7\001\002\000\010\010\ufff9\052\ufff9\066\ufff9\001" +
    "\002\000\006\003\020\066\022\001\002\000\004\045\ufff4" +
    "\001\002\000\006\003\020\066\022\001\002\000\004\045" +
    "\ufff6\001\002\000\006\053\034\066\016\001\002\000\004" +
    "\066\036\001\002\000\004\002\001\001\002\000\006\053" +
    "\uffeb\066\uffeb\001\002\000\004\054\037\001\002\000\006" +
    "\055\uffe9\066\uffe9\001\002\000\006\055\uffe5\066\016\001" +
    "\002\000\004\066\210\001\002\000\006\046\206\055\uffe6" +
    "\001\002\000\004\055\045\001\002\000\006\046\uffe3\055" +
    "\uffe3\001\002\000\006\052\ufffe\066\ufffe\001\002\000\006" +
    "\052\047\066\016\001\002\000\020\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\052\uffe8\053\uffe8\066\uffe8\001\002\000\006" +
    "\052\uffff\066\uffff\001\002\000\020\011\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\052\uffe0\053\uffe0\066\uffe0\001\002\000\020" +
    "\011\060\013\062\014\053\015\064\052\054\053\065\066" +
    "\055\001\002\000\004\054\202\001\002\000\020\011\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\052\uffe0\053\uffe0\066\uffe0\001" +
    "\002\000\066\011\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\174\050\173\051\uffbf\052\uffbf\054\uffbf\055\uffbf\062" +
    "\uffbf\066\uffbf\001\002\000\012\036\156\043\161\044\157" +
    "\054\160\001\002\000\020\011\uffde\013\uffde\014\uffde\015" +
    "\uffde\052\uffde\053\uffde\066\uffde\001\002\000\016\012\070" +
    "\054\076\063\066\064\077\065\072\066\055\001\002\000" +
    "\020\011\uffe1\013\uffe1\014\uffe1\015\uffe1\052\uffe1\053\uffe1" +
    "\066\uffe1\001\002\000\004\054\140\001\002\000\020\011" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\052\uffdf\053\uffdf\066\uffdf" +
    "\001\002\000\020\012\070\045\073\054\076\063\066\064" +
    "\077\065\072\066\055\001\002\000\006\053\uffe7\066\uffe7" +
    "\001\002\000\052\011\uffc7\013\uffc7\014\uffc7\015\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\045\uffc7\046\uffc7\051\uffc7\052\uffc7\055" +
    "\uffc7\062\uffc7\066\uffc7\001\002\000\014\023\103\024\105" +
    "\037\102\040\104\045\137\001\002\000\004\066\016\001" +
    "\002\000\054\011\uffcb\013\uffcb\014\uffcb\015\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\045\uffcb\046\uffcb\051\uffcb\052\uffcb\054\124" +
    "\055\uffcb\062\uffcb\066\uffcb\001\002\000\052\011\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9\046" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\062\uffc9\066\uffc9\001\002" +
    "\000\022\007\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\052" +
    "\uffd2\053\uffd2\066\uffd2\001\002\000\036\011\uffce\013\uffce" +
    "\014\uffce\015\uffce\023\uffce\024\uffce\037\uffce\040\uffce\045" +
    "\uffce\046\uffce\051\uffce\052\uffce\055\uffce\066\uffce\001\002" +
    "\000\052\011\uffcd\013\uffcd\014\uffcd\015\uffcd\023\uffcd\024" +
    "\uffcd\025\121\026\116\027\114\037\uffcd\040\uffcd\041\113" +
    "\042\115\045\uffcd\046\uffcd\051\uffcd\052\uffcd\055\uffcd\062" +
    "\122\066\uffcd\001\002\000\016\012\070\054\076\063\066" +
    "\064\077\065\072\066\055\001\002\000\052\011\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\046" +
    "\uffc8\051\uffc8\052\uffc8\055\uffc8\062\uffc8\066\uffc8\001\002" +
    "\000\014\023\103\024\105\037\102\040\104\055\101\001" +
    "\002\000\052\011\uffc4\013\uffc4\014\uffc4\015\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\045\uffc4\046\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\062\uffc4\066\uffc4\001\002\000\016\012\uffaf\054\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\016\012\uffb1" +
    "\054\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000" +
    "\016\012\uffae\054\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\001\002\000\016\012\uffb0\054\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\001\002\000\016\012\uffb2\054\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\001\002\000\016\012\070\054" +
    "\076\063\066\064\077\065\072\066\055\001\002\000\016" +
    "\012\uffb3\054\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\036\011\uffcf\013\uffcf\014\uffcf\015\uffcf\023\uffcf" +
    "\024\uffcf\037\uffcf\040\uffcf\045\uffcf\046\uffcf\051\uffcf\052" +
    "\uffcf\055\uffcf\066\uffcf\001\002\000\016\012\uffac\054\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000\016\012" +
    "\uffa7\054\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\016\012\uffa9\054\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\001\002\000\016\012\uffa6\054\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\001\002\000\016\012\uffaa\054\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000\016\012\070" +
    "\054\076\063\066\064\077\065\072\066\055\001\002\000" +
    "\016\012\uffad\054\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\001\002\000\016\012\uffab\054\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\001\002\000\016\012\uffa8\054\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\001\002\000\036\011\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\023\uffcc\024\uffcc\037\uffcc\040\uffcc" +
    "\045\uffcc\046\uffcc\051\uffcc\052\uffcc\055\uffcc\066\uffcc\001" +
    "\002\000\020\012\070\054\076\055\uffc2\063\066\064\077" +
    "\065\072\066\055\001\002\000\004\055\132\001\002\000" +
    "\016\023\103\024\105\037\102\040\104\046\uffc0\055\uffc0" +
    "\001\002\000\006\046\130\055\uffc3\001\002\000\016\012" +
    "\070\054\076\063\066\064\077\065\072\066\055\001\002" +
    "\000\016\023\103\024\105\037\102\040\104\046\uffc1\055" +
    "\uffc1\001\002\000\052\011\uffca\013\uffca\014\uffca\015\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\045\uffca\046\uffca\051\uffca\052\uffca" +
    "\055\uffca\062\uffca\066\uffca\001\002\000\054\011\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\045\uffc6\046" +
    "\uffc6\050\134\051\uffc6\052\uffc6\055\uffc6\062\uffc6\066\uffc6" +
    "\001\002\000\016\012\070\054\076\063\066\064\077\065" +
    "\072\066\055\001\002\000\014\023\103\024\105\037\102" +
    "\040\104\051\136\001\002\000\052\011\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5\046\uffc5\051" +
    "\uffc5\052\uffc5\055\uffc5\062\uffc5\066\uffc5\001\002\000\022" +
    "\007\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\052\uffd3\053" +
    "\uffd3\066\uffd3\001\002\000\016\012\070\054\076\063\066" +
    "\064\077\065\072\066\055\001\002\000\016\023\103\024" +
    "\105\037\102\040\104\046\142\055\143\001\002\000\004" +
    "\065\145\001\002\000\004\045\144\001\002\000\022\007" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\052\uffd4\053\uffd4" +
    "\066\uffd4\001\002\000\004\055\146\001\002\000\004\045" +
    "\147\001\002\000\022\007\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\052\uffd5\053\uffd5\066\uffd5\001\002\000\026\011" +
    "\060\013\062\014\053\015\064\023\103\024\105\037\102" +
    "\040\104\052\054\066\055\001\002\000\020\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\052\uffdd\053\uffdd\066\uffdd\001\002" +
    "\000\022\007\153\011\uffdf\013\uffdf\014\uffdf\015\uffdf\052" +
    "\uffdf\053\uffdf\066\uffdf\001\002\000\016\011\060\013\062" +
    "\014\053\015\064\052\054\066\055\001\002\000\020\011" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\052\uffdc\053\uffdc\066\uffdc" +
    "\001\002\000\022\007\uffd1\011\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\052\uffd1\053\uffd1\066\uffd1\001\002\000\020\003\170" +
    "\012\070\054\076\063\066\064\077\065\072\066\055\001" +
    "\002\000\004\045\166\001\002\000\020\012\070\054\076" +
    "\055\uffc2\063\066\064\077\065\072\066\055\001\002\000" +
    "\004\045\162\001\002\000\022\007\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\052\uffd9\053\uffd9\066\uffd9\001\002\000" +
    "\004\055\164\001\002\000\004\045\165\001\002\000\022" +
    "\007\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\052\uffd7\053" +
    "\uffd7\066\uffd7\001\002\000\022\007\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\052\uffd8\053\uffd8\066\uffd8\001\002\000" +
    "\014\023\103\024\105\037\102\040\104\045\172\001\002" +
    "\000\004\045\171\001\002\000\022\007\uffda\011\uffda\013" +
    "\uffda\014\uffda\015\uffda\052\uffda\053\uffda\066\uffda\001\002" +
    "\000\022\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\052" +
    "\uffdb\053\uffdb\066\uffdb\001\002\000\016\012\070\054\076" +
    "\063\066\064\077\065\072\066\055\001\002\000\004\066" +
    "\175\001\002\000\062\011\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\062\uffbe\066" +
    "\uffbe\001\002\000\014\023\103\024\105\037\102\040\104" +
    "\051\177\001\002\000\062\011\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\062\uffbd" +
    "\066\uffbd\001\002\000\020\011\060\013\062\014\053\015" +
    "\064\052\054\053\201\066\055\001\002\000\022\007\uffd0" +
    "\011\uffd0\013\uffd0\014\uffd0\015\uffd0\052\uffd0\053\uffd0\066" +
    "\uffd0\001\002\000\004\066\055\001\002\000\004\055\204" +
    "\001\002\000\004\045\205\001\002\000\022\007\uffd6\011" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\052\uffd6\053\uffd6\066\uffd6" +
    "\001\002\000\004\066\016\001\002\000\006\046\uffe4\055" +
    "\uffe4\001\002\000\006\046\uffe2\055\uffe2\001\002\000\004" +
    "\066\213\001\002\000\004\045\223\001\002\000\004\036" +
    "\214\001\002\000\010\063\216\064\217\065\215\001\002" +
    "\000\006\045\ufff2\046\ufff2\001\002\000\006\045\ufff1\046" +
    "\ufff1\001\002\000\006\045\ufff0\046\ufff0\001\002\000\006" +
    "\045\uffed\046\221\001\002\000\004\066\213\001\002\000" +
    "\004\045\uffee\001\002\000\010\010\uffef\052\uffef\066\uffef" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\006\001\001\000\012\004\012" +
    "\007\014\011\011\012\013\001\001\000\004\004\210\001" +
    "\001\000\004\003\031\001\001\000\002\001\001\000\006" +
    "\032\016\033\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\016\033\026" +
    "\001\001\000\002\001\001\000\006\032\016\033\030\001" +
    "\001\000\002\001\001\000\006\004\032\005\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\037\001\001\000\012\004\040" +
    "\015\041\016\043\017\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\045\001\001\000\006\004\012\007\047\001\001\000" +
    "\004\045\050\001\001\000\002\001\001\000\004\022\051" +
    "\001\001\000\012\023\060\026\055\030\056\031\062\001" +
    "\001\000\002\001\001\000\004\022\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\147\025\073\026\070\027\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\066\025" +
    "\073\026\070\027\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\106\037\107\040\105\001\001\000" +
    "\004\004\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\116\042" +
    "\111\043\117\001\001\000\012\024\077\025\073\026\070" +
    "\027\074\001\001\000\002\001\001\000\010\036\106\037" +
    "\107\040\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\110\026\070\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\122\026\070\027\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\124\021\126\024\125\025\073\026" +
    "\070\027\074\001\001\000\002\001\001\000\010\036\106" +
    "\037\107\040\105\001\001\000\002\001\001\000\012\024" +
    "\130\025\073\026\070\027\074\001\001\000\010\036\106" +
    "\037\107\040\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\134\025\073\026\070\027\074\001\001" +
    "\000\010\036\106\037\107\040\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\140\025\073\026\070" +
    "\027\074\001\001\000\010\036\106\037\107\040\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\150\026\055\030\056\031\151\036\106\037\107" +
    "\040\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\055\030\153\031\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\166\025\073\026\070\027" +
    "\074\001\001\000\002\001\001\000\016\020\162\021\126" +
    "\024\125\025\073\026\070\027\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\106\037" +
    "\107\040\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\175\025\073\026\070\027" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\106\037\107\040\105\001\001\000\002\001\001\000" +
    "\012\023\060\026\055\030\056\031\062\001\001\000\002" +
    "\001\001\000\004\026\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\040\016\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


		
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	MojaKlasa mk = new MojaKlasa();


	boolean inFunction = false;
	boolean inMain = false;

	boolean returnFound = false;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MulopRight ::= MODEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MulopRight ::= DIVEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MulopRight ::= MULEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AddopRight ::= MINUSEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AddopRight ::= PLUSEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Relop ::= LESSOREQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Relop ::= MOREOREQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Relop ::= MORE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Relop ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Relop ::= EQUALEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Designator ::= IDENT SQUAREBRACKETLEFT Expr SQUAREBRACKETRIGHT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Designator ::= IDENT DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Designator ::= IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ActualParamList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Factor ::= NEW Type SQUAREBRACKETLEFT Expr SQUAREBRACKETRIGHT 
            {
              Obj RESULT =null;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object tname = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(tname.getKind() != Obj.Type){
					parser.report_error("Greska na liniji " + tleft + " nije klasnog tipa", null);
					RESULT = Tab.noObj; //NULL...
				} else if(expr.getType() == Tab.intType){
					parser.report_error("Greska na liniji " + tleft + " nije klasnog tipa", null);
					RESULT = Tab.noObj; //NULL...					
					}
				else {
				Struct struct = new Struct(Struct.Array, tName.getType());
				RESULT = new Obj(tName.getKind(), "", struct);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(t.getType().getKind() != Struct.Class && t.getKind() != Obj.Type){
					parser.report_error("Greska na liniji " + tleft + " nije klasnog tipa", null);
					RESULT = Tab.noObj; //NULL...
				}
				else
				{
					RESULT = t
				}	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bo = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", MojaTabela.boolType, bo?1:0, Obj.NO_VALUE);	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", Tab.charType, c, Obj.NO_VALUE);	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", Tab.intType, num, Obj.NO_VALUE);	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				RESULT = des;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = des;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Factor Mulop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= IF Expr Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		 mk.printCallCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Matched ::= Designator MINUSMINUS SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Matched ::= Designator PLUSPLUS SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Unmatched ::= IF Expr Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Unmatched ::= IF Expr Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodDecl ::= Type IDENT LPAREN NT$0 FormPars RPAREN VarDeclList LBRACE NT$1 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int funNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int funNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String funName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int funNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int funNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String funName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

	inFunction = false;
	inMain = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT =null;
		int funNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String funName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

	inFunction = true;
	if(funName.equals("main")){
		inMain = true;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDeclList ::= IDENT EQUAL ConstVal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclList ::= IDENT EQUAL ConstVal COMMA ConstDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstVal ::= CHAR 
            {
              Object RESULT =null;
		
	mk.globalConsts++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstVal ::= BOOL 
            {
              Object RESULT =null;
		
	mk.globalConsts++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstVal ::= NUMBER 
            {
              Object RESULT =null;
		
	mk.globalConsts++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecElemList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						parser.report_error("Sintaksna greska na liniji " + errleft + " pogresna deklaracija globalne promenljive!" , null);
						parser.report_info("Uspesan oporovak od greske na liniji" + errleft + "."  , null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecElemList ::= error COMMA VarDecElemList 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
						
						parser.report_error("Sintaksna greska na liniji " + errleft + " pogresna deklaracija globalne promenljive | ZAREZ!" , null);
						parser.report_info("Uspesan oporovak od greske na liniji" + errleft + "."  , null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecElemList ::= VarDecElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecElemList ::= VarDecElem COMMA VarDecElemList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecElem ::= IDENT SQUAREBRACKETLEFT SQUAREBRACKETRIGHT 
            {
              Object RESULT =null;
		
	if(inFunction != true){
		mk.globalVars++;
	}
	if(inMain == true){
		mk.inMainVars++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElem",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecElem ::= IDENT 
            {
              Object RESULT =null;
		
	if(inFunction != true){
		mk.globalVars++;
	}
	if(inMain == true){
		mk.inMainVars++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElem",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= Type VarDecElemList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= DeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= DeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG IDENT DeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Tab.chainLocalSymbols(Tab.find(pName));
	Tab.closeScope(); 
	parser.report_info(mk.dump(),null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

