
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 28 00:13:38 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.as.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
 * @version Mon Aug 28 00:13:38 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
            "\000\157\000\002\053\002\000\002\002\011\000\002\002" +
                    "\004\000\002\005\004\000\002\005\002\000\002\007\004" +
                    "\000\002\007\004\000\002\007\004\000\002\007\002\000" +
                    "\002\054\002\000\002\006\006\000\002\035\003\000\002" +
                    "\035\005\000\002\036\005\000\002\036\003\000\002\036" +
                    "\005\000\002\036\003\000\002\013\003\000\002\013\003" +
                    "\000\002\013\003\000\002\055\002\000\002\010\007\000" +
                    "\002\056\002\000\002\012\010\000\002\012\005\000\002" +
                    "\023\003\000\002\030\003\000\002\030\003\000\002\003" +
                    "\004\000\002\003\002\000\002\057\002\000\002\060\002" +
                    "\000\002\061\002\000\002\004\016\000\002\016\003\000" +
                    "\002\016\002\000\002\014\005\000\002\014\003\000\002" +
                    "\015\004\000\002\021\004\000\002\021\002\000\002\022" +
                    "\003\000\002\022\003\000\002\033\005\000\002\033\007" +
                    "\000\002\034\006\000\002\034\006\000\002\034\005\000" +
                    "\002\034\005\000\002\034\007\000\002\034\007\000\002" +
                    "\034\011\000\002\034\007\000\002\034\005\000\002\034" +
                    "\004\000\002\034\007\000\002\034\005\000\002\041\003" +
                    "\000\002\041\005\000\002\042\003\000\002\042\005\000" +
                    "\002\043\003\000\002\043\005\000\002\025\003\000\002" +
                    "\025\006\000\002\025\003\000\002\025\003\000\002\025" +
                    "\003\000\002\025\004\000\002\025\007\000\002\025\005" +
                    "\000\002\017\003\000\002\017\002\000\002\020\005\000" +
                    "\002\020\003\000\002\024\003\000\002\024\005\000\002" +
                    "\024\006\000\002\037\003\000\002\037\003\000\002\037" +
                    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
                    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
                    "\002\026\003\000\002\026\004\000\002\031\005\000\002" +
                    "\031\003\000\002\032\005\000\002\032\003\000\002\027" +
                    "\005\000\002\027\003\000\002\052\003\000\002\052\003" +
                    "\000\002\044\003\000\002\044\003\000\002\045\003\000" +
                    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
                    "\047\003\000\002\047\003\000\002\051\003\000\002\051" +
                    "\003\000\002\051\003\000\002\050\003\000\002\050\003" +
                    "\000\002\050\003"});

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
            "\000\240\000\004\004\005\001\002\000\004\002\242\001" +
                    "\002\000\004\066\006\001\002\000\010\010\001\052\001" +
                    "\066\001\001\002\000\010\010\ufff9\052\ufff9\066\ufff9\001" +
                    "\002\000\010\010\011\052\013\066\017\001\002\000\004" +
                    "\066\017\001\002\000\010\010\ufffb\052\ufffb\066\ufffb\001" +
                    "\002\000\010\016\uffe4\053\uffe4\066\uffe4\001\002\000\006" +
                    "\003\ufff8\066\ufff8\001\002\000\010\010\ufffa\052\ufffa\066" +
                    "\ufffa\001\002\000\010\010\ufffc\052\ufffc\066\ufffc\001\002" +
                    "\000\056\003\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\023" +
                    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\037\uffe8\040\uffe8" +
                    "\041\uffe8\042\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052" +
                    "\uffe8\055\uffe8\062\uffe8\066\uffe8\001\002\000\006\003\022" +
                    "\066\024\001\002\000\006\045\ufff3\046\032\001\002\000" +
                    "\006\045\ufff1\046\030\001\002\000\004\045\027\001\002" +
                    "\000\010\045\ufff6\046\ufff6\050\025\001\002\000\004\051" +
                    "\026\001\002\000\006\045\ufff5\046\ufff5\001\002\000\010" +
                    "\010\ufff7\052\ufff7\066\ufff7\001\002\000\006\003\022\066" +
                    "\024\001\002\000\004\045\ufff2\001\002\000\006\003\022" +
                    "\066\024\001\002\000\004\045\ufff4\001\002\000\010\016" +
                    "\041\053\037\066\017\001\002\000\004\066\042\001\002" +
                    "\000\004\066\uffe7\001\002\000\004\002\000\001\002\000" +
                    "\010\016\uffe5\053\uffe5\066\uffe5\001\002\000\004\066\uffe6" +
                    "\001\002\000\004\054\uffe3\001\002\000\004\054\044\001" +
                    "\002\000\006\055\uffe2\066\uffe2\001\002\000\006\055\uffde" +
                    "\066\017\001\002\000\004\066\224\001\002\000\006\046" +
                    "\222\055\uffdf\001\002\000\004\055\052\001\002\000\006" +
                    "\046\uffdc\055\uffdc\001\002\000\006\052\ufffd\066\ufffd\001" +
                    "\002\000\006\052\054\066\017\001\002\000\020\011\uffe1" +
                    "\013\uffe1\014\uffe1\015\uffe1\052\uffe1\053\uffe1\066\uffe1\001" +
                    "\002\000\006\052\ufffe\066\ufffe\001\002\000\020\011\uffd9" +
                    "\013\uffd9\014\uffd9\015\uffd9\052\uffd9\053\uffd9\066\uffd9\001" +
                    "\002\000\020\011\065\013\067\014\060\015\071\052\061" +
                    "\053\072\066\062\001\002\000\004\054\216\001\002\000" +
                    "\020\011\uffd9\013\uffd9\014\uffd9\015\uffd9\052\uffd9\053\uffd9" +
                    "\066\uffd9\001\002\000\066\011\uffb6\013\uffb6\014\uffb6\015" +
                    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\036\uffb6" +
                    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
                    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6" +
                    "\055\uffb6\062\uffb6\066\uffb6\001\002\000\020\011\uffd7\013" +
                    "\uffd7\014\uffd7\015\uffd7\052\uffd7\053\uffd7\066\uffd7\001\002" +
                    "\000\030\036\200\037\121\040\115\041\112\042\117\043" +
                    "\175\044\202\047\136\050\134\054\201\062\122\001\002" +
                    "\000\020\012\074\024\073\054\105\063\076\064\107\065" +
                    "\100\066\062\001\002\000\020\011\uffda\013\uffda\014\uffda" +
                    "\015\uffda\052\uffda\053\uffda\066\uffda\001\002\000\004\054" +
                    "\156\001\002\000\020\011\uffd8\013\uffd8\014\uffd8\015\uffd8" +
                    "\052\uffd8\053\uffd8\066\uffd8\001\002\000\022\012\074\024" +
                    "\073\045\101\054\105\063\076\064\107\065\100\066\062" +
                    "\001\002\000\010\016\uffe0\053\uffe0\066\uffe0\001\002\000" +
                    "\016\012\074\054\105\063\076\064\107\065\100\066\062" +
                    "\001\002\000\004\066\017\001\002\000\004\045\150\001" +
                    "\002\000\052\011\uffbe\013\uffbe\014\uffbe\015\uffbe\023\uffbe" +
                    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\037\uffbe\040\uffbe\041" +
                    "\uffbe\042\uffbe\045\uffbe\046\uffbe\051\uffbe\052\uffbe\055\uffbe" +
                    "\062\uffbe\066\uffbe\001\002\000\060\011\uffc2\013\uffc2\014" +
                    "\uffc2\015\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
                    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2\047" +
                    "\136\050\134\051\uffc2\052\uffc2\054\135\055\uffc2\062\uffc2" +
                    "\066\uffc2\001\002\000\052\011\uffc0\013\uffc0\014\uffc0\015" +
                    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\037\uffc0" +
                    "\040\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\051\uffc0\052" +
                    "\uffc0\055\uffc0\062\uffc0\066\uffc0\001\002\000\022\007\uffcb" +
                    "\011\uffcb\013\uffcb\014\uffcb\015\uffcb\052\uffcb\053\uffcb\066" +
                    "\uffcb\001\002\000\052\011\uffa5\013\uffa5\014\uffa5\015\uffa5" +
                    "\023\uffa5\024\uffa5\025\125\026\126\027\124\037\uffa5\040" +
                    "\uffa5\041\uffa5\042\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5" +
                    "\055\uffa5\062\uffa5\066\uffa5\001\002\000\052\011\uffa3\013" +
                    "\uffa3\014\uffa3\015\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
                    "\027\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\045\uffa3\046" +
                    "\uffa3\051\uffa3\052\uffa3\055\uffa3\062\uffa3\066\uffa3\001\002" +
                    "\000\026\011\uffaa\013\uffaa\014\uffaa\015\uffaa\045\uffaa\046" +
                    "\uffaa\051\uffaa\052\uffaa\055\uffaa\066\uffaa\001\002\000\020" +
                    "\012\074\024\073\054\105\063\076\064\107\065\100\066" +
                    "\062\001\002\000\044\011\uffa7\013\uffa7\014\uffa7\015\uffa7" +
                    "\023\120\024\110\037\121\040\115\041\112\042\117\045" +
                    "\uffa7\046\uffa7\051\uffa7\052\uffa7\055\uffa7\062\122\066\uffa7" +
                    "\001\002\000\052\011\uffbf\013\uffbf\014\uffbf\015\uffbf\023" +
                    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\037\uffbf\040\uffbf" +
                    "\041\uffbf\042\uffbf\045\uffbf\046\uffbf\051\uffbf\052\uffbf\055" +
                    "\uffbf\062\uffbf\066\uffbf\001\002\000\016\012\uff9d\054\uff9d" +
                    "\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000\016\012" +
                    "\uffa1\054\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\001\002" +
                    "\000\020\012\uff94\024\uff94\054\uff94\063\uff94\064\uff94\065" +
                    "\uff94\066\uff94\001\002\000\016\012\074\054\105\063\076" +
                    "\064\107\065\100\066\062\001\002\000\016\012\uffa2\054" +
                    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000\020" +
                    "\012\uff9b\024\uff9b\054\uff9b\063\uff9b\064\uff9b\065\uff9b\066" +
                    "\uff9b\001\002\000\016\012\074\054\105\063\076\064\107" +
                    "\065\100\066\062\001\002\000\020\012\uff93\024\uff93\054" +
                    "\uff93\063\uff93\064\uff93\065\uff93\066\uff93\001\002\000\016" +
                    "\012\uff9e\054\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001" +
                    "\002\000\020\012\uff9c\024\uff9c\054\uff9c\063\uff9c\064\uff9c" +
                    "\065\uff9c\066\uff9c\001\002\000\020\012\uff95\024\uff95\054" +
                    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\001\002\000\052" +
                    "\011\uffa6\013\uffa6\014\uffa6\015\uffa6\023\uffa6\024\uffa6\025" +
                    "\125\026\126\027\124\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
                    "\045\uffa6\046\uffa6\051\uffa6\052\uffa6\055\uffa6\062\uffa6\066" +
                    "\uffa6\001\002\000\016\012\uff96\054\uff96\063\uff96\064\uff96" +
                    "\065\uff96\066\uff96\001\002\000\016\012\uff98\054\uff98\063" +
                    "\uff98\064\uff98\065\uff98\066\uff98\001\002\000\016\012\uff97" +
                    "\054\uff97\063\uff97\064\uff97\065\uff97\066\uff97\001\002\000" +
                    "\016\012\074\054\105\063\076\064\107\065\100\066\062" +
                    "\001\002\000\052\011\uffa4\013\uffa4\014\uffa4\015\uffa4\023" +
                    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\037\uffa4\040\uffa4" +
                    "\041\uffa4\042\uffa4\045\uffa4\046\uffa4\051\uffa4\052\uffa4\055" +
                    "\uffa4\062\uffa4\066\uffa4\001\002\000\026\011\uffa8\013\uffa8" +
                    "\014\uffa8\015\uffa8\045\uffa8\046\uffa8\051\uffa8\052\uffa8\055" +
                    "\uffa8\066\uffa8\001\002\000\004\055\133\001\002\000\052" +
                    "\011\uffbb\013\uffbb\014\uffbb\015\uffbb\023\uffbb\024\uffbb\025" +
                    "\uffbb\026\uffbb\027\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
                    "\045\uffbb\046\uffbb\051\uffbb\052\uffbb\055\uffbb\062\uffbb\066" +
                    "\uffbb\001\002\000\020\012\074\024\073\054\105\063\076" +
                    "\064\107\065\100\066\062\001\002\000\022\012\074\024" +
                    "\073\054\105\055\uffb9\063\076\064\107\065\100\066\062" +
                    "\001\002\000\004\066\137\001\002\000\066\011\uffb5\013" +
                    "\uffb5\014\uffb5\015\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
                    "\027\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
                    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
                    "\052\uffb5\054\uffb5\055\uffb5\062\uffb5\066\uffb5\001\002\000" +
                    "\004\055\145\001\002\000\006\046\uffb7\055\uffb7\001\002" +
                    "\000\006\046\143\055\uffba\001\002\000\020\012\074\024" +
                    "\073\054\105\063\076\064\107\065\100\066\062\001\002" +
                    "\000\006\046\uffb8\055\uffb8\001\002\000\052\011\uffc1\013" +
                    "\uffc1\014\uffc1\015\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
                    "\027\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046" +
                    "\uffc1\051\uffc1\052\uffc1\055\uffc1\062\uffc1\066\uffc1\001\002" +
                    "\000\004\051\147\001\002\000\066\011\uffb4\013\uffb4\014" +
                    "\uffb4\015\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
                    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
                    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
                    "\054\uffb4\055\uffb4\062\uffb4\066\uffb4\001\002\000\022\007" +
                    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\052\uffcc\053\uffcc" +
                    "\066\uffcc\001\002\000\054\011\uffbd\013\uffbd\014\uffbd\015" +
                    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\037\uffbd" +
                    "\040\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\050\152\051" +
                    "\uffbd\052\uffbd\055\uffbd\062\uffbd\066\uffbd\001\002\000\020" +
                    "\012\074\024\073\054\105\063\076\064\107\065\100\066" +
                    "\062\001\002\000\004\051\154\001\002\000\052\011\uffbc" +
                    "\013\uffbc\014\uffbc\015\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
                    "\uffbc\027\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc" +
                    "\046\uffbc\051\uffbc\052\uffbc\055\uffbc\062\uffbc\066\uffbc\001" +
                    "\002\000\026\011\uffa9\013\uffa9\014\uffa9\015\uffa9\045\uffa9" +
                    "\046\uffa9\051\uffa9\052\uffa9\055\uffa9\066\uffa9\001\002\000" +
                    "\020\012\074\024\073\054\105\063\076\064\107\065\100" +
                    "\066\062\001\002\000\006\046\160\055\161\001\002\000" +
                    "\004\065\163\001\002\000\004\045\162\001\002\000\022" +
                    "\007\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\052\uffcd\053" +
                    "\uffcd\066\uffcd\001\002\000\004\055\164\001\002\000\004" +
                    "\045\165\001\002\000\022\007\uffce\011\uffce\013\uffce\014" +
                    "\uffce\015\uffce\052\uffce\053\uffce\066\uffce\001\002\000\016" +
                    "\011\065\013\067\014\060\015\071\052\061\066\062\001" +
                    "\002\000\020\011\uffd6\013\uffd6\014\uffd6\015\uffd6\052\uffd6" +
                    "\053\uffd6\066\uffd6\001\002\000\022\007\171\011\uffd8\013" +
                    "\uffd8\014\uffd8\015\uffd8\052\uffd8\053\uffd8\066\uffd8\001\002" +
                    "\000\016\011\065\013\067\014\060\015\071\052\061\066" +
                    "\062\001\002\000\020\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
                    "\052\uffd5\053\uffd5\066\uffd5\001\002\000\022\007\uffca\011" +
                    "\uffca\013\uffca\014\uffca\015\uffca\052\uffca\053\uffca\066\uffca" +
                    "\001\002\000\020\012\uffb1\024\uffb1\054\uffb1\063\uffb1\064" +
                    "\uffb1\065\uffb1\066\uffb1\001\002\000\004\045\213\001\002" +
                    "\000\020\012\uffb2\024\uffb2\054\uffb2\063\uffb2\064\uffb2\065" +
                    "\uffb2\066\uffb2\001\002\000\020\012\074\024\073\054\105" +
                    "\063\076\064\107\065\100\066\062\001\002\000\022\003" +
                    "\207\012\uffb3\024\uffb3\054\uffb3\063\uffb3\064\uffb3\065\uffb3" +
                    "\066\uffb3\001\002\000\022\012\074\024\073\054\105\055" +
                    "\uffb9\063\076\064\107\065\100\066\062\001\002\000\004" +
                    "\045\203\001\002\000\022\007\uffd1\011\uffd1\013\uffd1\014" +
                    "\uffd1\015\uffd1\052\uffd1\053\uffd1\066\uffd1\001\002\000\004" +
                    "\055\205\001\002\000\004\045\206\001\002\000\022\007" +
                    "\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\052\uffd0\053\uffd0" +
                    "\066\uffd0\001\002\000\004\045\210\001\002\000\022\007" +
                    "\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\052\uffd3\053\uffd3" +
                    "\066\uffd3\001\002\000\004\045\212\001\002\000\022\007" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\052\uffd4\053\uffd4" +
                    "\066\uffd4\001\002\000\022\007\uffd2\011\uffd2\013\uffd2\014" +
                    "\uffd2\015\uffd2\052\uffd2\053\uffd2\066\uffd2\001\002\000\020" +
                    "\011\065\013\067\014\060\015\071\052\061\053\215\066" +
                    "\062\001\002\000\022\007\uffc9\011\uffc9\013\uffc9\014\uffc9" +
                    "\015\uffc9\052\uffc9\053\uffc9\066\uffc9\001\002\000\004\066" +
                    "\062\001\002\000\010\047\136\050\134\055\220\001\002" +
                    "\000\004\045\221\001\002\000\022\007\uffcf\011\uffcf\013" +
                    "\uffcf\014\uffcf\015\uffcf\052\uffcf\053\uffcf\066\uffcf\001\002" +
                    "\000\004\066\017\001\002\000\006\046\uffdd\055\uffdd\001" +
                    "\002\000\006\046\uffdb\055\uffdb\001\002\000\004\066\uffed" +
                    "\001\002\000\004\066\230\001\002\000\004\045\241\001" +
                    "\002\000\004\036\231\001\002\000\010\063\233\064\234" +
                    "\065\232\001\002\000\006\045\ufff0\046\ufff0\001\002\000" +
                    "\006\045\uffef\046\uffef\001\002\000\006\045\uffee\046\uffee" +
                    "\001\002\000\006\045\uffe9\046\uffeb\001\002\000\004\046" +
                    "\237\001\002\000\004\066\230\001\002\000\004\045\uffea" +
                    "\001\002\000\010\010\uffec\052\uffec\066\uffec\001\002\000" +
                    "\004\002\uffff\001\002"});

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
            "\000\240\000\004\002\003\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\053\006\001\001\000\004\007\007" +
                    "\001\001\000\012\006\015\010\011\011\014\023\013\001" +
                    "\001\000\004\023\224\001\001\000\002\001\001\000\004" +
                    "\003\033\001\001\000\004\054\017\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\006\035\020" +
                    "\036\022\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\006\035\020\036\030\001" +
                    "\001\000\002\001\001\000\006\035\020\036\032\001\001" +
                    "\000\002\001\001\000\010\004\037\023\035\030\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\004\057\042\001" +
                    "\001\000\002\001\001\000\004\060\044\001\001\000\012" +
                    "\014\046\015\050\016\047\023\045\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\004\005\052\001\001\000\006\006\054\023\013\001" +
                    "\001\000\004\061\055\001\001\000\002\001\001\000\004" +
                    "\021\056\001\001\000\012\022\065\024\063\033\062\034" +
                    "\067\001\001\000\002\001\001\000\004\021\213\001\001" +
                    "\000\002\001\001\000\002\001\001\000\010\037\176\046" +
                    "\175\050\173\001\001\000\016\024\076\025\102\026\165" +
                    "\027\101\031\103\032\105\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\016\024\076\025\102" +
                    "\026\074\027\101\031\103\032\105\001\001\000\002\001" +
                    "\001\000\014\024\076\025\102\027\101\031\154\032\105" +
                    "\001\001\000\004\023\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\051\126\001\001\000\002\001\001\000" +
                    "\002\001\001\000\016\024\076\025\102\026\131\027\101" +
                    "\031\103\032\105\001\001\000\012\045\115\046\113\050" +
                    "\110\052\112\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\014\024\076\025" +
                    "\102\027\101\031\130\032\105\001\001\000\002\001\001" +
                    "\000\002\001\001\000\010\024\076\025\102\027\122\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\004\051\126\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\006\024\076" +
                    "\025\127\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\016\024\076\025\102" +
                    "\026\145\027\101\031\103\032\105\001\001\000\022\017" +
                    "\137\020\141\024\076\025\102\026\140\027\101\031\103" +
                    "\032\105\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
                    "\024\076\025\102\026\143\027\101\031\103\032\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\016\024\076\025\102\026\152\027\101\031\103\032\105" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\016\024\076\025\102\026\156\027\101\031\103" +
                    "\032\105\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\012\022\166\024\063\033" +
                    "\062\034\167\001\001\000\002\001\001\000\002\001\001" +
                    "\000\010\024\063\033\171\034\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\016\024\076\025\102\026\210\027" +
                    "\101\031\103\032\105\001\001\000\002\001\001\000\022" +
                    "\017\203\020\141\024\076\025\102\026\140\027\101\031" +
                    "\103\032\105\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\012\022\065\024\063\033" +
                    "\062\034\067\001\001\000\002\001\001\000\004\024\216" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\006\015\222\023\045\001\001\000\002\001\001" +
                    "\000\002\001\001\000\004\055\225\001\001\000\004\012" +
                    "\226\001\001\000\002\001\001\000\002\001\001\000\004" +
                    "\013\234\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\056\235\001\001\000\002\001\001" +
                    "\000\004\012\237\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001"});

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {
    return 2;
  }

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

      MojaTabela.mojaInicijalizacija();
      //Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	MojaKlasa mk = new MojaKlasa();


	boolean inFunction = false;
	boolean inMain = false;
  Struct constType = null;

	boolean returnFound = false;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MulopRight ::= MODEQUAL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight", 38, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MulopRight ::= DIVEQUAL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight", 38, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MulopRight ::= MULEQUAL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight", 38, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MulopLeft ::= MOD 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft", 39, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MulopLeft ::= DIV 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft", 39, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MulopLeft ::= MUL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft", 39, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Mulop ::= MulopRight 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop", 37, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Mulop ::= MulopLeft 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop", 37, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AddopRight ::= MINUSEQUAL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight", 36, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AddopRight ::= PLUSEQUAL 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight", 36, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AddopLeft ::= MINUS 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft", 35, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AddopLeft ::= PLUS 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft", 35, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Addop ::= AddopRight 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop", 34, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Addop ::= AddopLeft 
            {
              Integer RESULT = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop", 34, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CombOp ::= MulopRight 
          {
            Integer RESULT = null;


            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CombOp", 40, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CombOp ::= AddopRight 
          {
            Integer RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CombOp", 40, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= Factor 
          {
            Obj RESULT = null;
            int factorleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int factorright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj factor = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            RESULT = factor;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term", 21, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Term ::= Term MulopLeft Factor 
          {
            Obj RESULT = null;
            int termleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
            int termright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
            Obj term = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
            int factorleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int factorright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj factor = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (factor.getType() != Tab.intType || term.getType() != Tab.intType) {
              parser.report_error("Greska na liniji " + termleft + " nije int tipa!", null);
              RESULT = Tab.noObj; //NULL...
            } else {
              RESULT = factor;
            }

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term", 21, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AddTerm ::= Term 
          {
            Obj RESULT = null;
            int termleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int termright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj term = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            RESULT = term;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm", 24, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AddTerm ::= AddTerm AddopLeft Term 
          {
            Obj RESULT = null;
            int addTermleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
            int addTermright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
            Obj addTerm = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
            int termleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int termright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj term = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (addTerm.getType() != Tab.intType || term.getType() != Tab.intType) {
              parser.report_error("Greska na liniji " + addTermleft + " nije int tipa!", null);
              RESULT = Tab.noObj; //NULL...
            } else {
              RESULT = term;
            }

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm", 24, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ComboExpr ::= AddTerm 
          {
            Obj RESULT = null;
            int addTermleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int addTermright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj addTerm = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            RESULT = addTerm;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ComboExpr", 23, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ComboExpr ::= AddTerm CombOp ComboExpr 
          {
            Obj RESULT = null;
            int addTermleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
            int addTermright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
            Obj addTerm = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
            int comboExprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int comboExprright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj comboExpr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (addTerm.getKind() != Obj.Var) {
              parser.report_error("Greska na liniji " + addTermleft + " nije varijabla", null);
              RESULT = Tab.noObj; //NULL...
            } else if (addTerm.getType() != Tab.intType || comboExpr.getType() != Tab.intType) {
              parser.report_error("Greska na liniji " + addTermleft + " nije int tipa", null);
              RESULT = Tab.noObj; //NULL...
            } else {
              RESULT = addTerm;
            }

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ComboExpr", 23, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= MINUS ComboExpr 
          {
            Obj RESULT = null;
            int exprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int exprright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj expr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (expr.getType() != Tab.intType) {
              parser.report_error("Greska na liniji " + exprleft + " nije int tipa", null);
              RESULT = Tab.noObj; //NULL...
            } else {
              RESULT = expr;
            }

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ComboExpr 
          {
            Obj RESULT = null;
            int exprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int exprright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Obj expr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;


            if (expr.getType() != Tab.intType && expr.getType() != Tab.charType && expr.getType() != MojaTabela.boolType) {
              parser.report_error("Greska na liniji " + exprleft + " nije int tipa", null);
              RESULT = Tab.noObj; //NULL...
            } else {
              RESULT = expr;
            }

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Relop ::= LESSOREQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Relop ::= MOREOREQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Relop ::= MORE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Relop ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Relop ::= EQUALEQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 30, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop", 29, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop", 29, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop", 29, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Designator ::= Designator SQUAREBRACKETLEFT Expr SQUAREBRACKETRIGHT 
            {
              Obj RESULT =null;
              int desleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
              int desright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
              Obj des = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;
              int exprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
              int exprright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
              Obj expr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

              //nije ok
              RESULT = des;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator", 18, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
              int identleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int identright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              String ident = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              //nije ok
              RESULT = Tab.find(ident);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator", 18, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Designator ::= IDENT 
            {
              Obj RESULT =null;
              int identleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int identright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              String ident = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              Obj obj = Tab.find(ident);

              if (obj.getKind() != Obj.Var && obj.getKind() != Obj.Con && obj.getKind() != Obj.Meth) {
                parser.report_error("Greska na liniji " + " nije var, con, meth!!!!!!!!!!!" + obj.getKind(), null);
                RESULT = Tab.noObj; //NULL...
              } else
                RESULT = obj;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator", 18, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ActualParamList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList", 14, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList", 14, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars", 13, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars", 13, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
              int exprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
              int exprright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
              Obj expr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

              RESULT = expr;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Factor ::= NEW Type SQUAREBRACKETLEFT Expr SQUAREBRACKETRIGHT 
            {
              Obj RESULT =null;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
              Struct tname = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;
              int exprleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
              int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
              Obj expr = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

              if (expr.getType() == Tab.intType) {
                parser.report_error("Greska na liniji " + tnameleft + " nije klasnog tipa", null);
                RESULT = Tab.noObj; //NULL...
              } else {
                Struct struct = new Struct(Struct.Array, tname);
                RESULT = new Obj(Obj.Var, "", struct);
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
              Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              if (t.getKind() != Struct.Class) {
                parser.report_error("Greska na liniji " + tleft + " nije klasnog tipa", null);
                RESULT = Tab.noObj; //NULL...
				}
				else
				{
                  RESULT = new Obj(Obj.Var, "", t);
                }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bo = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              RESULT = new Obj(Obj.Con, "", MojaTabela.boolType, bo ? 1 : 0, Obj.NO_VALUE);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              RESULT = new Obj(Obj.Con, "", Tab.charType, c, Obj.NO_VALUE);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              RESULT = new Obj(Obj.Con, "", Tab.intType, num, Obj.NO_VALUE);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              RESULT = des;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              RESULT = des;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 19, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact", 33, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact", 33, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CondTerm ::= CondFact ANDAND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm", 32, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm", 32, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condition ::= CondTerm OROR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition", 31, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition", 31, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= IF Expr Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= RETURN SEMI 
          {
            Object RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= RETURN Expr SEMI 
          {
            Object RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
              mk.printCallCount++;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= Designator MINUSMINUS SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= Designator PLUSPLUS SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
              parser.log.debug("Izraz tipa: nesto = XX; XX je lose. Uspesan oporavak od greske pri dodeli vrednosti.");
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Matched ::= Designator Assignop Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Unmatched ::= IF Expr Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched", 25, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Unmatched ::= IF Expr Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched", 25, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement", 16, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement", 16, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList", 15, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList", 15, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl", 11, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList", 10, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList", 10, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars", 12, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars", 12, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDecl ::= MethodType IDENT NT$4 LPAREN NT$5 FormPars RPAREN VarDeclList LBRACE NT$6 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)).right;
              Obj type = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)).value;
              int funNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 10)).left;
              int funNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 10)).right;
              String funName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 10)).value;

              Tab.chainLocalSymbols(Tab.find(funName));
              Tab.closeScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl", 2, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)).right;
              Obj type = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)).value;
              int funNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).left;
              int funNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).right;
              String funName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).value;

              inFunction = false;
              inMain = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6", 47, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
              Obj type = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;
              int funNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
              int funNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
              String funName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;

              inFunction = true;
              if (funName.equals("main")) {
                inMain = true;
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5", 46, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
          {
            Object RESULT = null;
            int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
            int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
            Obj type = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
            int funNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int funNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            String funName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            MojaTabela.insert(Obj.Meth, funName, Tab.noType);
            Tab.openScope();

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4", 45, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodType ::= VOID 
          {
            Obj RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType", 22, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodType ::= Type 
          {
            Obj RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType", 22, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= IDENT 
          {
            Struct RESULT = null;
            int identleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int identright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            String ident = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            Obj obj = Tab.find(ident);
            if (obj.getKind() != Obj.Type) {
              parser.report_error("Greska na liniji " + identleft + ":" + ident + " nije tip", null);
              RESULT = Tab.noType;
            } else
              RESULT = obj.getType();

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type", 17, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDeclList ::= IDENT EQUAL ConstVal 
            {
              Object RESULT =null;
              int constNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
              int constNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
              String constName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              Object type = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              if (type != constType) {
                parser.report_error("Greska na liniji " + typeleft + " nekompatibilni tipovi", null);
                RESULT = Tab.noObj; //NULL...
              } else if (Tab.currentScope().findSymbol(constName) == Tab.noObj) {
                parser.report_error("Greska na liniji " + typeleft + " vec postoji simbol sa imenom: " + constName, null);
                RESULT = Tab.noObj; //NULL...
              } else {
                Tab.insert(Obj.Con, constName, constType);
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList", 8, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ConstDeclList ::= IDENT EQUAL ConstVal NT$3 COMMA ConstDeclList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
              RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
              int constNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
              int constNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
              String constName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
              Object type = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList", 8, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
              int constNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
              int constNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
              String constName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
              int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              Object type = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              if (type != constType) {
                parser.report_error("Greska na liniji " + constNameleft + " nekompatibilni tipovi", null);
                RESULT = Tab.noObj; //NULL...
              } else if (Tab.currentScope().findSymbol(constName) == Tab.noObj) {
                parser.report_error("Greska na liniji " + constNameleft + " vec postoji simbol sa imenom: " + constName, null);
                RESULT = Tab.noObj; //NULL...
              } else {
                Tab.insert(Obj.Con, constName, constType);
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3", 44, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstDecl ::= CONST Type NT$2 ConstDeclList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
              RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
              int cTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
              int cTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
              Struct cType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl", 6, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
          {
            Object RESULT = null;
            int cTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int cTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            Struct cType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            constType = cType;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2", 43, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstVal ::= CHAR 
            {
              Object RESULT =null;
		
	mk.globalConsts++;
              RESULT = Tab.charType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal", 9, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstVal ::= BOOL 
            {
              Object RESULT =null;
		
	mk.globalConsts++;
              RESULT = MojaTabela.boolType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal", 9, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstVal ::= NUMBER 
            {
              Object RESULT =null;
		
	mk.globalConsts++;
              RESULT = Tab.intType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVal", 9, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecElemList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						parser.report_error("Sintaksna greska na liniji " + errleft + " pogresna deklaracija globalne promenljive!" , null);
						parser.report_info("Uspesan oporovak od greske na liniji" + errleft + "."  , null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList", 28, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecElemList ::= error COMMA VarDecElemList 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;


              parser.report_error("Sintaksna greska na liniji " + errleft + " pogresna deklaracija globalne promenljive | ZAREZ!", null);
              parser.report_info("Uspesan oporovak od greske na liniji" + errleft + "."  , null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList", 28, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecElemList ::= VarDecElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList", 28, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecElemList ::= VarDecElem COMMA VarDecElemList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElemList", 28, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecElem ::= IDENT SQUAREBRACKETLEFT SQUAREBRACKETRIGHT 
            {
              Object RESULT =null;
              int varNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
              int varNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
              String varName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;

              if (inFunction != true) {
                mk.globalVars++;
	}
	if(inMain == true){
		mk.inMainVars++;
	}
              if (Tab.currentScope().findSymbol(varName) != null) {
                parser.report_error("Greska na liniji " + varNameleft + " vec postoji simbol sa imenom: " + varName, null);
                RESULT = Tab.noObj; //NULL...
              } else {
                Tab.insert(Obj.Var, varName, new Struct(Struct.Array, constType));
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElem", 27, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecElem ::= IDENT 
            {
              Object RESULT =null;
              int varNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int varNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              String varName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              parser.report_error("****************************************" + varName, null);
              if (inFunction != true) {
                mk.globalVars++;
              }
	if(inMain == true){
		mk.inMainVars++;
	}
              if (Tab.currentScope().findSymbol(varName) != null) {
                parser.report_error("Greska na liniji " + varNameleft + " vec postoji simbol sa imenom: " + varName, null);
                RESULT = Tab.noObj; //NULL...
              } else {
                Tab.insert(Obj.Var, varName, constType);
              }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecElem", 27, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type NT$1 VarDecElemList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
              RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
              int cTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
              int cTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
              Struct cType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl", 4, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
              int cTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
              int cTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
              Struct cType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              constType = cType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1", 42, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList", 5, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= DeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList", 5, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList", 5, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= DeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList", 5, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList", 3, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDeclList VarDecl 
          {
            Object RESULT = null;

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList", 3, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
          }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROG IDENT NT$0 DeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
              RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).value;
              int pNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
              int pNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
              String pName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).value;

              Tab.chainLocalSymbols(Tab.find(pName));
              Tab.closeScope();
              Tab.dump(new MojTableVisitor());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program", 0, ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
          {
            Object RESULT = null;
            int pNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
            int pNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
            String pName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            MojaTabela.insert(Obj.Prog, pName, Tab.noType);
            Tab.openScope();

            CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0", 41, ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

